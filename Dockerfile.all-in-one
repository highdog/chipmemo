# 多服务合一的 Docker 镜像
# 包含 MongoDB, Node.js 后端, Next.js 前端, 和 Nginx

FROM ubuntu:22.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV NODE_VERSION=18
ENV MONGODB_VERSION=7.0

# 安装基础依赖
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    gnupg \
    lsb-release \
    supervisor \
    nginx \
    && rm -rf /var/lib/apt/lists/*

# 安装 Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash - \
    && apt-get install -y nodejs

# 安装 pnpm
RUN npm install -g pnpm

# 安装 MongoDB
RUN wget -qO - https://www.mongodb.org/static/pgp/server-${MONGODB_VERSION}.asc | apt-key add - \
    && echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/${MONGODB_VERSION} multiverse" | tee /etc/apt/sources.list.d/mongodb-org-${MONGODB_VERSION}.list \
    && apt-get update \
    && apt-get install -y mongodb-org \
    && rm -rf /var/lib/apt/lists/*

# 创建必要的目录
RUN mkdir -p /app/frontend /app/backend /var/log/supervisor /data/db /var/log/mongodb

# 设置 MongoDB 数据目录权限
RUN chown -R mongodb:mongodb /data/db /var/log/mongodb

# 复制前端代码并构建
WORKDIR /app/frontend
COPY package*.json pnpm-lock.yaml ./
RUN pnpm install --no-frozen-lockfile
COPY . .
RUN pnpm build

# 复制后端代码
WORKDIR /app/backend
COPY backend/package*.json ./
RUN npm ci --only=production
COPY backend/src/ ./src/
COPY backend/init-mongo.js ./init-mongo.js

# 创建配置文件目录
RUN mkdir -p /docker-entrypoint-initdb.d

# 复制配置文件
COPY docker-configs/ /tmp/configs/

# 配置 Nginx
RUN cp /tmp/configs/nginx-default /etc/nginx/sites-available/default

# 配置 MongoDB
RUN cp /tmp/configs/mongod.conf /etc/mongod.conf

# 配置 Supervisor
RUN cp /tmp/configs/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# 复制 MongoDB 初始化脚本
RUN cp /tmp/configs/init-mongo.js /docker-entrypoint-initdb.d/init-mongo.js

# 复制启动脚本
RUN cp /tmp/configs/start.sh /start.sh

RUN chmod +x /start.sh

# 暴露端口
EXPOSE 80 3000 3001 27017

# 设置工作目录
WORKDIR /app

# 启动服务
CMD ["/start.sh"]